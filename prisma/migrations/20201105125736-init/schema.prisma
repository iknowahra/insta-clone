// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mysql"
    url = "***"
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["connectOrCreate"]
}

model User {
    id          Int       @id @default(autoincrement())
    avatar      String? @default("")
    email       String    @unique
    userName    String    @unique
    firstName   String?   @default("")
    lastName    String? @default("")
    bio         String? @default("")
    /// @onDelete(CASCADE)
    posts       Post[]
    /// @onDelete(CASCADE)
    likes       Like[]
    /// @onDelete(CASCADE)
    comments    Comment[]
    /// @onDelete(CASCADE)
    rooms       Room[]
    loginSecret String?
    followers   User[]    @relation("FollowRelation")
    following   User[]    @relation("FollowRelation")
    /// @onDelete(CASCADE)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now()) @updatedAt
}

model Post {
    id        Int       @id @default(autoincrement())
    location  String?
    caption   String
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    /// @onDelete(CASCADE)
    files     File[]
    /// @onDelete(CASCADE)
    likes     Like[]
    /// @onDelete(CASCADE)
    comments  Comment[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
}

model Like {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
    userId    Int       
    postId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
    id        Int      @id @default(autoincrement())
    text      String
    user      User     @relation(fields: [userId], references: [id])
    post      Post     @relation(fields: [postId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    userId    Int
    postId    Int
}

model File {
    id     Int    @id @default(autoincrement())
    url    String
    post   Post   @relation(fields: [postId], references: [id])
    postId Int
}

model Room {
    id           Int       @id @default(autoincrement())
    /// @onDelete(SET_NULL)
    participants User[]
    messages     Message[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @default(now()) @updatedAt
}

model Message {
    id         Int      @id @default(autoincrement())
    text       String
    /// @onDelete(SET_NULL)
    user       User     @relation(fields: [userId], references: [id])
    /// @onDelete(SET_NULL)
    room       Room     @relation(fields: [roomId], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt
    userId     Int
    roomId     Int
}

